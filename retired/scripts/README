
The scripts in this directory were the original build files for the
source dependencies we used on OSX - where RPM/deb packages cannot be
used. We replaced the scripts with a single Makefile in 2013; it seems
that CMake might be the build tool we ultimately use, but as of spring
2014 we're not there.

-------------------------------------------------------------------------

What's here and how to use it to make the libraries Hyrax uses.

This holds all of the dependencies for the Hyrax server. This includes
the following libraries: netcdf-3.6, hdf-4.2, hdf-eos2, hdf5-1.8 and
icu-3.6. Also included are the libraries hdf4 depends on: zlib, szip
and libjpeg, and note that hdf4 requires specific versions of these
which are provided here.

This was originally assembled to streamline builds on OS/X because so
many of the dependencies needed for a full build of Hyrax are just not
easy to find or build. For Hyrax on OS/X we build a installer package
with the server and all it needs. However, we have found that these 
collection of software is useful for the Linux crowd, too.

If you're building these 'dependencies' on Linux, skip over the stuff
about mkPackage - that builds an OS/X installer package using
'PackageMaker' and it won't work on Linux. Instead, skip to #2 below
under 'More Detail' and just run depends-builder; set $prefix to be
the root of your Hyrax build. Also, if you're building on Linux, be
sure to read about Linux builds for HDF4 in the FAQ section of
www.opendap.org.

Short version: 

To make the dependencies, install them in a directory named <prefix>
do this:

   ./mkPackage <hyrax version> <prefix>

If you set the environment variable $prefix, then you can leave off
the second argument.

Caveat: PackageMaker will install your dependencies in <prefix> so if
you're making this to give out to people, make sure that <prefix> is
something like /usr/local/OPeNDAP/servers/hyrax-1.6.2. In other words,
do not use a directory in your account or an obscure place that's not
going to exist on every users' computer.

More detail:

1. Directories you will find here:

downloads: This holds all of the tar.gz or other source distributions
scripts: Extra scripts to set up shell environment variables
shell scripts. Look here to find them.
src: The source dists in downloads are expanded here.
OSX_Resources: This holds various resources used by packagemaker
macosx: This is the directory where we copy the whole directory and
file hierarchy so that PackageMaker will work its magic on the correct
structure. PackageMaker is fussy.

2. Scripts

You can use this code to just build, install of check the dependencies
using the script 'depends-builder'. It takes two arguments: a keyword
and the <prefix> directory. The keywords are 'build', 'install' and
'check'. Using:

	 ./depends-builder install $prefix

will cause all of the dependencies to be built and installed in
$prefix/deps. The mkPackage script does this as it's first main step.
If all you want is a copy of the deps to do development work, this is
all you need to do.

You could run the rest of the commands by hand to make the package,
but it's better to use mkPackage - or at least look there for an
explicit list of what to do. 
