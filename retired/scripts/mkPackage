#!/bin/sh

################################################
usage()
{
echo \
"\033[1m$0
        $0\033[0m

\033[1mNAME\033[0m
   $0 - builds the external dependancies for hyrax into an OS-X package install.

\033[1mSYNOPSIS\033[0m
    \033[1m$0\033[0m hyrax_version [prefix]

\033[1mDESCRIPTION\033[0m
    The $0 command can be used to build the hyrax external
    dependancies into a OS-X package installer. The each external
    package is built and installed into the the directory specified by
    'prefix'. The final package is named using the hyrax_version
    number supplied on the command line.

    \033[1mhyrax_version\033[0m
        This is the version number of hyrax for which these
        dependancies are being built. Typically this should be a
        number version string like '1.6.2'

    \033[1mprefix\033[0m
        This is the installation prefix that will be used with the
        hyrax hyrax distribution. This prefix will usually include the
        version number of the release. Example:
        '/usr/local/opendap/servers/hyrax-1.6.2' This can be set as
        environment variable or optionally specified on the command
        line. The environment variable takes precedence.

\033[1m$0
        $0\033[0m"
}

################################################
setup_env()
{
    export build_dir=`pwd`
    echo build_dir: $build_dir
    echo

    if test -z "$1"
    then
        echo "ERROR: Provide a hyrax version number on the command line."
	echo
        usage
        exit 1
    fi
    
    export hyrax_version=$1
    echo hyrax_version: $hyrax_version
    export hyrax_version_major=`echo $hyrax_version | \
	sed 's@\([0-9][0-9]*\)\..*@\1@'`
    export hyrax_version_minor=`echo $hyrax_version | \
	sed 's@[0-9][0-9]*\.\([0-9][0-9]*\)\..*@\1@'`
    
    if test -z "$prefix"
    then
        if test -z "$2"
        then
            echo "ERROR: You must either have a 'prefix' environment variable set, or you must provide one on the command line."
	    echo
            usage
            exit 1
	else
	    export prefix=$2
        fi
    fi
    
    echo prefix: $prefix
    
    basename=`echo $prefix | sed 's@.*/\(.*\)@\1@'`
    dest_prefix="/usr/local/opendap/servers/$basename"
    echo destination prefix: $dest_prefix

    echo "Environment configured and confirmed. Proceeding with build..."    
}

################################################
makePackage()
{
    cd $build_dir

    # Build the dependencies
    if test ! -d $prefix/deps
    then
	echo "depends-builder install $prefix ..."
	(./depends-builder install $prefix)
    else
	echo "Using exsting package build; use rm $prefix/deps to recompile."
    fi

    # Make the directory structure PackageMaker needs
    if test -d macosx
    then
	echo "Cleanig out the old macosx package build directory..."
	rm -rf macosx
    fi
    mkdir -p macosx/$dest_prefix

    # Use tar to copy the entire hierarchy of stuff built and installed 
    # by depends-builder above into the directory to be used by PackageMaker.
    (cd $prefix; tar cf - deps apache-tomcat-*) | \
	( cd $build_dir/macosx/$dest_prefix; tar xfp -)

    # cd $prefix
    # tar -cf $build_dir/deps.tar deps apache-tomcat-*
    
    # cd $build_dir/macosx/$prefix
    # tar -xf $build_dir/deps.tar
    
    echo "Updating the package resource files..."
    cd $build_dir/OSX_Resources
    cat Welcome.html.proto | \
	sed -e "s@_VERSION_@$hyrax_version@g" \
            -e "s@_PREFIX_@$dest_prefix@g" > Welcome.html
    cat ReadMe.txt.proto | \
	sed -e "s@_VERSION_@$hyrax_version@g" \
            -e "s@_PREFIX_@$dest_prefix@g" > ReadMe.txt    
    # cat ReadMe.txt.proto | \
    # 	sed -e "s@_VERSION_@$hyrax_version@g" \
    #         -e "s@_PREFIX_@$prefix@g" > ReadMe.txt    
    cat Description.plist.proto | \
	sed -e "s@_VERSION_@$hyrax_version@g" > Description.plist
    cat Info.plist.proto | \
	   sed -e "s^_PREFIX_^$dest_prefix^g" \
	       -e "s^_FULL_VERSION_^$hyrax_version^g" \
	       -e "s^_MAJOR_VERSION_^$hyrax_version_major^g" \
	       -e "s^_MINOR_VERSION_^$hyrax_version_minor^g" > Info.plist
    
    # Now call PackageMaker and package up that directory.

    cd $build_dir
    if test -d hyrax-$hyrax_version-depends.pkg
    then
	echo "Removing the old package..."
	rm -rf hyrax-$hyrax_version-depends.pkg
    fi

    echo "Building the package..."
    /Developer/usr/bin/packagemaker --root macosx --id org.opendap.hyrax_dependancies-$hyrax_version --title "Hyrax-$hyrax_version dependancies" --version "$hyrax_version" --out hyrax-$hyrax_version-depends.pkg --resources OSX_Resources
    
    echo "Done."
}

setup_env "$@"

makePackage

