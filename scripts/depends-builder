#!/bin/sh
#
# Build the dependencies for Hyrax 1.6++. This script will unpack the 
# dependencies, configure the Makefile and build so that the libraries
# are installed under the build's $prefix directory in a subdir named
# 'deps'. The shrew metaproject Makefile knows to use this if present.
# 
# NB: In some cases these dependencies have odd configuration/setup
# requirements which this script performs.
#
# What follows are a series of functions. The actual script execution
# doesn't start until the very end of the file.

################################################
# 
# Utility functions

usage()
{
cat <<EOF
SYNOPSIS
    $0 build|check|install [prefix]

DESCRIPTION

    The $0 command can be used to build the hyrax external
    dependencies. It can also be used to build an OS-X package for use
    with teh Apple installer. Each external package is built and
    installed into the the directory specified by 'prefix'.

    Note that the build|install|check argument is required. In each
    case the contents of the build directory (found in 'src') will be
    removed a new copy of the sources extracted from the distribution
    file (which can be found in the 'downloads' directory). In most
    situations, the 'install' option should be used.

    Setting MFLAGS to '-j9' or some suitable value will improve
    compilation speed considerably.

    prefix  This is the installation prefix that will be used with the
            hyrax distribution. This prefix will usually include the
            version number of the release. This must be given if the
            environment variable 'prefix' is not set.

            Example: '/usr/local/opendap/servers/hyrax-1.6.2'
            This can be set as environment variable or optionally specified
            on the command line. The environment variable takes precedence.
EOF
}

setup_env()
{
    export build_dir=`pwd`
    echo "build_dir: $build_dir"

    if test -z "$1" 
    then
        echo "ERROR: You must provide a build activity on the command line."
        usage
        exit 1
    fi
    
    ba=$1
    
    if test "$ba" != "build" -a "$ba" != "check" -a "$ba" != "install" 
    then
        echo "ERROR: \"$ba\" is not a valid build activity"
        usage
        exit 1
    fi

    export "build_command=$ba"
    
    if test -n "$2"
    then
	export prefix=$2
    elif test -z "$prefix"
    then
        echo "ERROR: The build 'prefix' not set"
        usage
        exit 1
    fi

    echo "prefix: $prefix"
    
    export deps_prefix=$prefix/deps
    echo "deps_prefix: $deps_prefix"

    if test ! -d $deps_prefix  
    then
        mkdir -p $deps_prefix
        if test $? -ne 0 
        then
            echo "Cannot create the dir \"$deps_prefix\" in which to install the dependencies."
            exit 1
        fi
    fi

    cd $build_dir
    export src_dir=$build_dir/src
    echo "src_dir: $src_dir"
    if test ! -d $src_dir  
    then
        mkdir -p $src_dir
        if test $? -ne 0 
        then
            echo "Cannot create the dir \"$src_dir\" in which to unpack the source distributions."
            exit 1
        fi
    fi
    
    # If we could get this running under autotools this hack could be 
    # avoided... jhrg
    
    if uname -a | grep Darwin
    then
        OS="osx"
    elif uname -a | grep Linux
    then
        OS="linux"
    else
        OS="unknown"
    fi
    
    echo "Environment configured and confirmed. Proceeding with build..."  
}

build_it()
{
    if test "$build_command" = "build" 
    then
        make $MFLAGS   
    elif test "$build_command" = "check"  
    then
        make $MFLAGS check
    elif test "$build_command" = "install"  
    then
        make $MFLAGS && make install
    fi
}

################################################
#
# Each package/dependency has its own function to control unpacking,
# configuration and build/install

szip()
{
    echo "------------------------------"
    echo "Building SZIP package."
    
    szip_id=szip-2.1
    szip_dir=$src_dir/$szip_id
    szip_prefix=$deps_prefix/$szip_id
    if test -n "$1" ; then
        szip_prefix=$1
    fi
    echo "SZIP installation directory is: $szip_prefix" 

    cd $src_dir
    
    if test -d $szip_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $szip_dir
    fi
    
    echo "Unpacking distribution..."
    tar -xzf ../downloads/$szip_id.tar.gz

    echo "Compiling $szip_id"
    cd $szip_dir
    # The code was just extracted from the tarball; there's no Makefile yet.
    # make distclean 2> /dev/null
        
    configure="./configure --prefix=$szip_prefix"
    echo CONFIGURE: $configure

    $configure
    
    build_it
}

# - - - - - - - - - - - - - - - - - - - - - -

zlib()
{
    echo "------------------------------"
    echo "Building ZLIB package."
    
    zlib_id=zlib-1.2.3
    zlib_dir=$src_dir/$zlib_id

    zlib_prefix=$deps_prefix/$zlib_id
    if test -n "$1" ; then
        zlib_prefix=$1
    fi
    echo "ZLIB installation directory is: $zlib_prefix" 

    cd $src_dir
    if test -d $zlib_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $zlib_dir
    fi


    echo "Unpacking distribution..."
    tar -xzf ../downloads/$zlib_id.tar.gz
    
    echo "Compiling $zlib_id"
    cd $zlib_dir

    configure="./configure --prefix=$zlib_prefix"
    echo CONFIGURE: $configure
    $configure

    build_it

    cd ..
}

# - - - - - - - - - - - - - - - - - - - - - -

zlib2()
{
    echo "------------------------------"
    echo "Building ZLIB package."
    
    zlib_id=zlib-1.2.5
    zlib_dir=$src_dir/$zlib_id

    zlib_prefix=$deps_prefix/$zlib_id
    if test -n "$1" ; then
        zlib_prefix=$1
    fi
    echo "ZLIB installation directory is: $zlib_prefix" 

    cd $src_dir
    if test -d $zlib_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $zlib_dir
    fi


    echo "Unpacking distribution..."
    tar -xzf ../downloads/$zlib_id.tar.gz
    
    echo "Compiling $zlib_id"
    cd $zlib_dir

    configure="./configure --prefix=$zlib_prefix"
    echo CONFIGURE: $configure
    $configure

    build_it

    cd ..
}

# - - - - - - - - - - - - - - - - - - - - - -

jpeg()
{    
    echo "------------------------------"
    echo "Building JPEG package."
    
    jpeg_id=jpeg-6b
    jpeg_dir=$src_dir/$jpeg_id
    
    jpeg_prefix=$deps_prefix/$jpeg_id
    if test -n "$1" ; then
        jpeg_prefix=$1
    fi
    echo "JPEG installation directory is: $jpeg_prefix" 

    cd $src_dir
    if test -d $jpeg_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $jpeg_dir
    fi

    echo "Unpacking distribution..."
    tar -xzf ../downloads/jpegsrc.v6b.tar.gz
    
    echo "Compiling $jpeg_id"
    cd $jpeg_dir

    ./configure CFLAGS="-O2 -fPIC" --prefix=$jpeg_prefix
    
    if test $build_command == "install" 
    then
        mkdir -p $jpeg_prefix/bin
        mkdir -p $jpeg_prefix/man/man1
        mkdir -p $jpeg_prefix/lib
        mkdir -p $jpeg_prefix/include
    fi  

    build_it
    
    # Below, link hdf4 against the lib in the source dir
    # since it is a static library. 6/8/12 jhrg
    if test $build_command == "install" 
    then
        cp libjpeg.a $jpeg_prefix/lib
        cp *.h $jpeg_prefix/include
    fi  
}    

jasper()
{
    echo "------------------------------"
    echo "Building JASPER package."
    
    jasper_id=jasper-1.900.1
    jasper_dir=$src_dir/$jasper_id
    jasper_prefix=$deps_prefix/$jasper_id
    if test -n "$1" ; then
        jasper_prefix=$1
    fi
    echo "JASPER installation directory is: $jasper_prefix" 

    cd $src_dir
    
    if test -d $jasper_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $jasper_dir
    fi
    
    echo "Unpacking distribution..."
    unzip ../downloads/$jasper_id.zip

    echo "Compiling $jasper_id"
    cd $jasper_dir
    ./configure CFLAGS="-I$jpeg_prefix/include -fPIC -O2 -fno-common" LDFLAGS="-L$jpeg_prefix/lib" --prefix=$jasper_prefix

    build_it
}

gdal()
{
    echo "------------------------------"
    echo "Building GDAL package."
    
    gdal_id=gdal-1.9.2
    gdal_dir=$src_dir/$gdal_id
    gdal_prefix=$deps_prefix/$gdal_id
    if test -n "$1" ; then
        gdal_prefix=$1
    fi
    echo "GDAL installation directory is: $gdal_prefix" 

    cd $src_dir
    
    if test -d $gdal_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $gdal_dir
    fi
    
    echo "Unpacking distribution..."
    tar -xzf ../downloads/$gdal_id.tar.gz

    echo "Compiling $gdal_id"
    cd $gdal_dir
    # The code was just extracted from the tarball; there's no Makefile yet.
    # make distclean 2> /dev/null
        
    configure="./configure --prefix=$gdal_prefix"
    echo CONFIGURE: $configure

    $configure
    
    tmp_mflags=$MFLAGS
    MFLAGS="$MFLAGS -j1"

    build_it

    MFLAGS=$tmp_mflags
}

# - - - - - - - - - - - - - - - - - - - - - -
hdf4()
{   
    hdf4_id=hdf-4.2.8
    hdf4_dir=$src_dir/$hdf4_id
    
    hdf4_prefix=$deps_prefix/$hdf4_id
    if test -n "$1" ; then
        hdf4_prefix=$1
    fi
    echo "HDF4 installation directory is: $hdf4_prefix" 

    echo "------------------------------"
    echo "Building HDF4 package."
    
    cd $src_dir
    if test -d $hdf4_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $hdf4_dir
    fi

    echo "Unpacking distribution..."
    tar -xzf ../downloads/$hdf4_id.tar.gz
        
    echo "Compiling $hdf4_id"

    cd $hdf4_dir
    # make distclean; just extracted code from the archive.
    ./configure \
        --disable-fortran \
        --enable-production \
        --enable-shared \
        --disable-netcdf \
        --prefix=$hdf4_prefix \
	--with-jpeg=$jpeg_prefix

    # /include,$jpeg_dir/lib

    # --with-jpeg=$jpeg_prefix 

    # removed --with-szlib=$szip_prefix 
    # because it breaks hdf-eos. jhrg 6/8/12

    build_it  
}

# - - - - - - - - - - - - - - - - - - - - - -
hdfeos2()
{   
    hdfeos2_id=hdf-eos2
    hdfeos2_dir=$src_dir/$hdfeos2_id
    
    hdfeos2_prefix=$deps_prefix/$hdfeos2_id
    if test -n "$1" ; then
        hdfeos2_prefix=$1
    fi
    echo "HDF-EOS2 installation directory is: $hdfeos2_prefix" 

    echo "------------------------------"
    echo "Building HDF-EOS2 package."
    
    cd $src_dir
    if test -d $hdfeos2_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $hdfeos2_dir
    fi

    echo "Unpacking distribution..."
    tar -xzf ../downloads/HDF-EOS2.17v1.00.tgz
        
    echo "................................."
    echo "Compiling $hdfeos2_id"
    
    echo "CC=$hdf4_prefix/bin/h4cc"

    cd $hdfeos2_dir
    make distclean 2> /dev/null
    ./configure \
        CC=$hdf4_prefix/bin/h4cc \
        --disable-fortran \
        --enable-production \
	--with-pic \
        --enable-install-include \
        --prefix=$hdfeos2_prefix \
        --with-hdf4=$hdf4_prefix

    # --with-szlib=$szip_prefix
    # --enable-shared

    build_it    
}

# - - - - - - - - - - - - - - - - - - - - - -
hdf5()
{   
    echo "------------------------------"
    echo "Building HDF5 package."
    
    hdf5_id=hdf5-1.8.5-patch1
    hdf5_dir=$src_dir/$hdf5_id
    
    hdf5_prefix=$deps_prefix/$hdf5_id
    if test -n "$1" ; then
        hdf5_prefix=$1
    fi
    echo "HDF5 installation directory is: $hdf5_prefix" 

    cd $src_dir
    if test -d $hdf5_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $hdf5_dir
    fi

    echo "Unpacking distribution..."
    tar -xzf ../downloads/$hdf5_id.tar.gz

    echo "Compiling $hdf5_id"
    cd $hdf5_dir
    ./configure --prefix=$hdf5_prefix

    build_it
}

# - - - - - - - - - - - - - - - - - - - - - -
hdf52()
{   
    echo "------------------------------"
    echo "Building HDF5 package."
    
    hdf5_id=hdf5-1.8.6
    hdf5_dir=$src_dir/$hdf5_id
    
    hdf5_prefix=$deps_prefix/$hdf5_id
    if test -n "$1" ; then
        hdf5_prefix=$1
    fi
    echo "HDF5 installation directory is: $hdf5_prefix" 

    cd $src_dir
    if test -d $hdf5_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $hdf5_dir
    fi

    echo "Unpacking distribution..."
    tar -xzf ../downloads/$hdf5_id.tar.gz

    echo "Compiling $hdf5_id"
    cd $hdf5_dir
    ./configure --prefix=$hdf5_prefix

#         --with-zlib=$zlib_prefix \
#         --with-zlib=$szlib_prefix
        
    build_it
}

# - - - - - - - - - - - - - - - - - - - - - -
netcdf3() 
{    
    echo "------------------------------"
    echo "Building NetCDF package."
    
    netcdf_id=netcdf-3.6.3
    netcdf_dir=$src_dir/$netcdf_id
    netcdf_prefix=$deps_prefix/$netcdf_id
    if test -n "$1" ; then
        netcdf_prefix=$1
    fi
    echo "NetCDF installation directory is: $netcdf_prefix" 

    cd $src_dir
    if test -d $netcdf_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $netcdf_dir
    fi

    echo "Unpacking distribution..."
    tar -xzf ../downloads/$netcdf_id.tar.gz

    echo "Compiling $netcdf_id"
    cd $netcdf_dir
    make distclean 2> /dev/null
    ./configure --prefix=$netcdf_prefix --disable-f77 --disable-cxx

    build_it
}

# - - - - - - - - - - - - - - - - - - - - - -
netcdf4() 
{    
    echo "------------------------------"
    echo "Building NetCDF package."
    
    netcdf_id=netcdf-4.1.2
    netcdf_dir=$src_dir/$netcdf_id
    netcdf_prefix=$deps_prefix/$netcdf_id
    if test -n "$1" ; then
        netcdf_prefix=$1
    fi
    echo "NetCDF 4 installation directory is: $netcdf_prefix" 

    cd $src_dir
    if test -d $netcdf_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $netcdf_dir
    fi

    echo "Unpacking distribution..."
    tar -xzf ../downloads/$netcdf_id.tar.gz

    echo "Compiling $netcdf_id"
    cd $netcdf_dir
    make distclean 2> /dev/null
    ./configure --prefix=$netcdf_prefix --disable-f77 \
        --with-hdf5=$hdf5_prefix \
        --with-zlib=$zlib_prefix \
        --with-zlib=$szlib_prefix

    # Build this library with the c++ interface because it's used
    # by the gridfields code.
    ./configure --prefix=$netcdf_prefix --disable-f77 --with-hdf5=$hdf5_prefix

# --disable-cxx \
#         --with-zlib=$zlib_prefix \
#         --with-zlib=$szlib_prefix

    build_it
}

# - - - - - - - - - - - - - - - - - - - - - -

cfitsio() 
{    
    echo "------------------------------"
    echo "Building cfitsio package."
    
    cfitsio_id=cfitsio
    cfitsio_dir=$src_dir/$cfitsio_id
    cfitsio_prefix=$deps_prefix/$cfitsio_id
    if test -n "$1" ; then
        cfitsio_prefix=$1
    fi
    echo "Cfitsio 4 installation directory is: $cfitsio_prefix" 

    cd $src_dir
    if test -d $cfitsio_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $cfitsio_dir
    fi

    echo "Unpacking distribution..."
    tar -xzf ../downloads/${cfitsio_id}3270.tar.gz

    echo "Compiling $cfitsio_id"
    cd $cfitsio_dir
    make distclean 2> /dev/null
    ./configure --prefix=$cfitsio_prefix

    build_it
}

# - - - - - - - - - - - - - - - - - - - - - -
icu(){
    echo "------------------------------"
    echo "Building ICU package."
    
    icu_id=icu-3.6
    icu_dir=$src_dir/$icu_id/source
    icu_prefix=$deps_prefix/$icu_id
    if test -n "$1" ; then
        icu_prefix=$1
    fi
    echo "ICU installation directory is: $icu_prefix" 

    cd $src_dir
    if test -d $icu_dir 
    then
        echo "Cleaning previous attempt."
        rm -rf $icu_dir
    fi

    echo "Unpacking distribution..."
    tar -xzf ../downloads/icu4c-3_6-src.tgz

    echo "Compiling $icu_id"
    cd $icu_dir
    if test "$OS" = "osx"
    then
        ./runConfigureICU MacOSX --prefix=$icu_prefix --disable-layout --disable-samples
    elif test "$OS" = "linux"
    then
        ./runConfigureICU Linux --prefix=$icu_prefix --disable-layout --disable-samples
    else
        ./configure --prefix=$icu_prefix --disable-layout --disable-samples
    fi

    build_it
}

# - - - - - - - - - - - - - - - - - - - - - -
tomcat(){
    echo "------------------------------"
    echo "Building Tomcat package."
    
    tomcat_id=apache-tomcat-7.0.29
    tomcat_prefix=$prefix
    if test -n "$1" ; then
        tomcat_prefix=$1
    fi
    
    cd $build_dir
    echo "Current Dir: " `pwd`
    echo "Tomcat installation directory is: $tomcat_prefix" 

    if test "$build_command" = "build" 
    then
        echo "Tomcat is a binary distribution. Nothing to build."
    elif test "$build_command" = "check"  
    then
        echo "WARNING! Don't know how to check Tomcat."
    elif test "$build_command" = "install"  
    then
        echo "Installing Tomcat here: "  $tomcat_prefix
        if test -d $tomcat_prefix/$tomcat_id 
        then
            echo "Removing Tomcat."
            rm -rf  $tomcat_prefix/$tomcat_id 
            echo "Tomcat removed."
        fi
        echo "Installing Tomcat."
        tar -xzf downloads/$tomcat_id.tar.gz  -C $tomcat_prefix
        echo "Tomcat installed in " $tomcat_prefix
    fi
}

#####################################
#
# Main script starts here
#

setup_env "$@"

# By default, use -j9 in build_it(). A better way to do this is to use getopts
# but ...
MFLAGS=${MFLAGS:="-j9"}

# szip 
# # zlib 
# zlib2
# jpeg 
# hdf4
# hdfeos2 

# # hdf5
# hdf52
# # netcdf3
netcdf4
# cfitsio
# icu
# tomcat
